name: Connect via VPN and Run Workflow

on:
  workflow_dispatch:
  repository_dispatch:
    types: [manual-trigger]
  push:
    branches:
      - main

jobs:
  vpn-job:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install OpenVPN
      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn

      # Step 3: Verify files exist (DEBUGGING)
      - name: Debug - Check Files
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la  # List ALL files
          echo "Checking for myvpn.ovpn:"
          if [ -f "myvpn.ovpn" ]; then
            echo "myvpn.ovpn found!"
            cat myvpn.ovpn  # Print first few lines of the file
          else
            echo "ERROR: myvpn.ovpn NOT FOUND!"
            exit 1  # Fail the workflow explicitly
          fi

      # Step 4: Create authentication file
      - name: Create Auth File
        run: |
          echo "Creating auth.txt..."
          printf "%s\n" "${{ secrets.VU }}" > auth.txt
          printf "%s\n" "${{ secrets.VP }}" >> auth.txt
          echo "Auth file content:"
          cat auth.txt

      # Step 5: Start VPN connection
      - name: Connect to VPN
        run: |
          echo "Starting VPN..."
          sudo openvpn \
            --config myvpn.ovpn \
            --auth-user-pass auth.txt \
            --daemon \
            --log vpn.log  # Log output to a file

          echo "Waiting for VPN to connect..."
          sleep 15

          echo "VPN connection status:"
          cat vpn.log || echo "No VPN log found"

      # Remaining steps
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.1'  # Replace with your Python version

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Python Script
        run: python sqlconn3.py
        env:
          SSH_KEY_PATH: ./neha_key.pem
          SSH_KEY: ${{ secrets.SSH_KEY }}
          MSH: ${{ secrets.MSH }}
          SSH: ${{ secrets.SSH }}
          SSU: ${{ secrets.SSU }}
          DBH: ${{ secrets.DBH }}
          MSU: ${{ secrets.MSU }}
          MSP: ${{ secrets.MSP }}
          MSN: ${{ secrets.MSN }}
          ASS: ${{ secrets.ASS }}
          ASD: ${{ secrets.ASD }}
          ASU: ${{ secrets.ASU }}
          ASP: ${{ secrets.ASP }}
