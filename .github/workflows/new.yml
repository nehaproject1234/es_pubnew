name: Connect via VPN and Run Workflow

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "5 * * * *" # Runs every 8 minutes
  repository_dispatch:  # Trigger via HTTP
    types: [manual-trigger]  # Define a custom event type
  push:
    branches:
      - main

jobs:
  vpn-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ODBC Driver 17
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17
          sudo apt-get install -y unixodbc-dev
      
      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn
        
      - name: Debug Secrets
        run: |
          echo "VU Length: ${#VU}"
          echo "VP Length: ${#VP}"
        env:
          VU: ${{ secrets.VU }}
          VP: ${{ secrets.VP }}

      - name: Create Authentication File
        shell: bash
        run: |
          pwd
          printf "%s\n" "${{ secrets.VU }}" > auth.txt
          printf "%s\n" "${{ secrets.VP }}" >> auth.txt
          ls -l auth.txt  # Check if auth.txt exists
          cat auth.txt

      - name: Verify VPN Configuration File
        run: |
          ls -l /home/runner/work/es_pubnew/es_pubnew/myvpn.ovpn
          cat /home/runner/work/es_pubnew/es_pubnew/myvpn.ovpn
          
      - name: Start VPN Connection
        run: |
          sudo openvpn --config /home/runner/work/es_pubnew/es_pubnew/myvpn.ovpn --auth-user-pass auth.txt --daemon
          sleep 10  # Wait for the VPN to establish

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.1' # Replace with your Python version, e.g., '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Ensure your repo has a requirements.txt

      - name: Run Python Script
        run: python sqlconn3.py
        env:   
          SSH_KEY_PATH: ./neha_key.pem
          SSH_KEY: ${{ secrets.SSH_KEY }}
          MSH: ${{ secrets.MSH }}
          SSH: ${{ secrets.SSH }}
          SSU: ${{ secrets.SSU }}
          DBH: ${{ secrets.DBH }}
          MSU: ${{ secrets.MSU }}
          MSP: ${{ secrets.MSP }}
          MSN: ${{ secrets.MSN }}
          ASS: ${{ secrets.ASS }}
          ASD: ${{ secrets.ASD }}
          ASU: ${{ secrets.ASU }}
          ASP: ${{ secrets.ASP }}
